

buildscript {
	repositories {
		mavenCentral()
        mavenLocal()
	}
	dependencies {
        def springboot_version = '2.1.4.RELEASE'
        def verifier_version = '2.1.0.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifier_version}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.springframework.boot"
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

dependencyManagement {
    imports {
        def verifier_version = '2.1.0.RELEASE'
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${verifier_version}"
    }
}

group = 'org.skramer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

configurations.all {
  exclude group: "org.axonframework", module: "axon-server-connector"
}

dependencies {
    // Spring
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compileOnly group: 'org.projectlombok', name: 'lombok'
    compile group: 'com.h2database', name: 'h2'

    // Spring cloud contract
    testCompile 'org.codehaus.groovy:groovy-all:2.4.6'
    // example with adding Spock core and Spock Spring
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'

    // External
    compile group: 'io.vavr', name: 'vavr', version: '0.10.0'

    // Axon
    compile group: 'org.axonframework', name: 'axon-spring', version: '4.1.1'
    compile group: 'org.axonframework', name: 'axon-eventsourcing', version: '4.1.1'
    compile group: 'org.axonframework', name: 'axon-spring-boot-autoconfigure', version: '4.1.1'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'org.axonframework', name: 'axon-test', version: '4.1.1'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    // self
    compile project(':spodddify-api')
}

contracts {
//	baseClassForTests = 'org.skramer.contract.BaseMockMvcSpec'
    baseClassForTests = 'org.skramer.spodddify.contract.BaseMockMvcTest'
//	generatedTestSourcesDir = project.file('src/generatedContract')
//    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.SPOCK
    stubsOutputDir = parent.project.file('spodddify-contract')

//    contractDependency {
//        stringNotation = "${project.group}:${project.name}:${project.version}"
//    }

//    contractsMode = "LOCAL"
//    contractsMode = "REMOTE"

}

publishStubsToScm {
	// We want to modify the default set up of the plugin when publish stubs to scm is called
	customize {
		// We want to pick contracts from a Git repository
		contractDependency {
			stringNotation = "${project.group}:${project.name}:${project.version}"
		}
		/*
		We reuse the contract dependency section to set up the path
		to the folder that contains the contract definitions. In our case the
		path will be /groupId/artifactId/version/contracts
		 */
		contractRepository {
            repositoryUrl = "git://file:///home/skramer/Projects/Java/spodddify/spodddify-contract/"
//			repositoryUrl = "git://file://${System.getenv("ROOT")}/target/contract_empty_git/"
		}
		// The mode can't be classpath
		contractsMode = "LOCAL"
	}
}

ext {
	contractsDir = file("mappings")
	stubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
}

// Automatically added by plugin:
// copyContracts - copies contracts to the output folder from which JAR will be created
// verifierStubsJar - JAR with a provided stub suffix
// the presented publication is also added by the plugin but you can modify it as you wish

publishing {
	publications {
		stubs(MavenPublication) {
			artifactId "${project.name}-stubs"
			artifact verifierStubsJar
		}
	}
}
